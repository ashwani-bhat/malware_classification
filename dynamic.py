
# coding: utf-8

# In[10]:


import numpy as np
import pandas as pd
import os
import json
import pickle
import sys

# In[11]:
if __name__ == '__main__':
    
    path = sys.argv[1]
    features = ['file_created','dll_loaded','file_opened','resolves_host','regkey_opened','file_read','regkey_read','file_copied','regkey_written','file_deleted','directory_removed','mutex','file_failed','command_line','directory_created','connects_host']
    dictfeatures = ['__notification__','certificate','crypto','exception','file','misc','netapi','network','ole','process','registry','resource','services','synchronisation','system','ui']
    # networkstat = ['udp','tcp','http','smtp','hosts','dns','domains','icmp']
    networkstat = ['tcp','http','smtp','hosts','dns','domains','icmp']

    # In[13]:

    
    import itertools

    countLoop = 0
    mylist = list()
    has = list()

    for filename in os.listdir(path):
        print(countLoop,end = " ")
        has.append(filename)
    #     if countLoop == 500:
    #         break
        countLoop += 1
        
       
        jsonFile = open(path + '/' + filename, 'r')
        values = json.load(jsonFile)
        jsonFile.close()
        # behaviour summary
        summ = dict()
        for x in features:
            try:
                f = len(values['behavior']['summary'][x])
            except:
                f = 0        
            summ[x] = f

        # apis        
        dictio = dict()
        for i in range(len(values['behavior']['processes'])):
            try:
                for j in range(len(values['behavior']['processes'][i]['calls'])):
                    dictio[values['behavior']['processes'][i]['calls'][j]['api']]=values['behavior']['processes'][i]['calls'][j]['category']
            except: 
                continue

        apicat = [(k, len(list(v))) for k, v in itertools.groupby(sorted(dictio.values()))]
        apicat = dict(apicat)


        network = dict()
        for x in networkstat:
            try:
                k = len(values['network'][x])
            except:
                k = 0        
            network[x] = k
        
        
        # no of processes
        processes = dict()
        processes['no. of processes'] = len(values['behavior']['processes'])
            
        # duration
        duration = dict()
        duration['duration'] = values['info']['duration']
        
        # no of apis
        apis = dict()
        count = 0
        for i in values['behavior']['apistats']:
            for j in values['behavior']['apistats'][i]:
                count += values['behavior']['apistats'][i][j]
        apis['no. of api'] = count
        
    #     print(network)
        summ.update(network)
        summ.update(apicat)
        summ.update(processes)
        summ.update(duration)
        summ.update(apis)
        mylist.append(summ)
        
    # In[14]:


    features.extend(dictfeatures)
    features.extend(networkstat)
    print("how") 

    # In[15]:

  
    X_test = pd.DataFrame(mylist,columns = features)
    X_test = X_test.fillna(0)


    # In[16]:

    for k in X_test.columns:
        if X_test[k].dtype != 'int64':
            X_test[k] = X_test[k].map(lambda name: int(name))


    # In[17]:
    print("lksf")

    # from sklearn import preprocessing
    # mm_scaler = preprocessing.MinMaxScaler()
    # X_test = mm_scaler.fit_transform(X_test)
    # X_test
    X_test.info()


    # In[18]:
    print("lk")
    filename = 'modeldym.sav'
    loaded_model = pickle.load(open(filename, 'rb'))

    y_pred = loaded_model.predict(X_test)

    fam = {0 : 'B',1: 'M'}

    y_pred = [fam[x] for x in y_pred]

    import csv
    file = open('dynamic.csv','w+')

    output = list()
    lis = ['hash_file', 'prediction label']
    writer = csv.writer(file, quoting=csv.QUOTE_NONNUMERIC)
    writer.writerow(lis)

    for hashes,pred in zip(has,y_pred):
        lis = [hashes, pred]
        print(lis)
        writer.writerow(lis)

